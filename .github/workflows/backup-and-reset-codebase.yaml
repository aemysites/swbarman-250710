name: Backup and Reset to E2E Workflow

on:
  workflow_dispatch:
    inputs:
      backup_branch_name:
        description: 'Name of the backup branch (optional)'
        required: false
        type: string

jobs:
  backup-and-reset:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.WORKFLOW_PAT }}

      - name: Set up Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'

      - name: Create backup branch
        id: backup
        run: |
          # Get current date and time in YYYY-MM-DD-HH-MM format
          TIMESTAMP=$(date +%Y-%m-%d-%H-%M)
          # Use provided branch name or default to backup-{timestamp}
          BRANCH_NAME="${INPUT_BACKUP_BRANCH_NAME:-backup-$TIMESTAMP}"
          # Create and push the backup branch
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Reset main to specified commit
        run: |
          git checkout main
          git reset --hard ${{ secrets.INITIAL_RESET_COMMIT }}
          git push origin main --force

      - name: Create setup issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Setup the Repository',
              body: 'Setup the Repository',
              labels: ['aemy-help', 'aemy-go', 'aemy-merge']
            });

      - name: Delete SharePoint previews
        id: delete-previews
        uses: ./.github/actions/sta-sp-delete
        with:
          context: |
            {"project": {"owner": "${{ github.repository_owner }}", "repo": "${{ github.event.repository.name }}", "branch": "main"}}
          urls: ${{ steps.filter_urls.outputs.urls }}

      - name: Filter URLs for deletion
        id: filter_urls
        run: |
          urls=$(jq -r '.urls[] | select(.status != "EXCLUDED") | .url' tools/importer/site-urls.json | paste -sd, -)
          echo "urls=$urls" >> $GITHUB_OUTPUT
